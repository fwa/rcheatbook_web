[
["index.html", "A Minimal Book Example Chapter 1 Prerequisites", " A Minimal Book Example Yihui Xie 2020-09-27 Chapter 1 Prerequisites This is a sample book written in Markdown. You can use anything that Pandocâ€™s Markdown supports, e.g., a math equation \\(a^2 + b^2 = c^2\\). The bookdown package can be installed from CRAN or Github: install.packages(&quot;bookdown&quot;) # or the development version # devtools::install_github(&quot;rstudio/bookdown&quot;) Remember each Rmd file contains one and only one chapter, and a chapter is defined by the first-level heading #. To compile this example to PDF, you need XeLaTeX. You are recommended to install TinyTeX (which includes XeLaTeX): https://yihui.org/tinytex/. "],
["load-data.html", "Chapter 2 Load data 2.1 csv 2.2 excel 2.3 txt vector", " Chapter 2 Load data 2.1 csv library(data.table) infile &lt;- &#39;input_file.csv&#39; df &lt;- fread(infile, data.table = F) 2.2 excel 2.2.1 general excel library(xlsx) # simply load df &lt;- xlsx::read.xlsx(infile, sheetIndex = 1) df &lt;- xlsx::read.xlsx(infile, sheetName = &#39;SheetName&#39;) # row/col customized df &lt;- xlsx::read.xlsx(infile, sheetIndex = 1, startRow = 2, colIndex = excelCol2Num[c(&#39;AA&#39;,&#39;B&#39;)], # helper vector below endRow = 99) 2.2.2 excel with password library(xlsx) df &lt;- read.xlsx(file.xlsx, sheetIndex = 1, password = &#39;password&#39;) 2.2.3 larger excel library(openxlsx) df &lt;- openxlsx::read.xlsx(infile) 2.2.4 excel column letter to index number excelCol2Num &lt;- 1:702 names(excelCol2Num) &lt;- do.call(paste0, expand.grid(LETTERS, c(&quot;&quot;, LETTERS))[,2:1]) excelCol2Num[c(&#39;AA&#39;, &#39;B&#39;)] 2.2.5 header name keep special character library(janitor) df_raw &lt;- read.csv(infile, check.names = F) df &lt;- clean_names(df_raw) ref_colnames &lt;- data.frame(original = colnames(df_raw), row.names = make_clean_names(colnames(df_raw))) 2.3 txt vector v1 &lt;- scan(&#39;file.txt&#39;, what = character, sep = &#39;\\n&#39;) "],
["explore-data.html", "Chapter 3 Explore Data 3.1 columns quick view", " Chapter 3 Explore Data 3.1 columns quick view str(df) apply(df, 2, function(x) range(x, na.rm = T)) "],
["clean-data.html", "Chapter 4 clean data 4.1 duplicates 4.2 column types 4.3 string manipulation 4.4 merge 4.5 select column by name", " Chapter 4 clean data 4.1 duplicates df &lt;- df[ !duplicated(df), ] 4.2 column types library(dplyr) df &lt;- df %&gt;% mutate_all(as.character) 4.3 string manipulation 4.3.1 replace df$text &lt;- gsub(&#39;old&#39;, &#39;new&#39;, df$text) 4.3.2 split text_part1 &lt;- sapply(strsplit(df$text_full, &#39; &#39;), &#39;[&#39;, 1) 4.4 merge df &lt;- merge(df1, df2, by=c(&#39;id&#39;), all.x = T) df &lt;- df1 %&gt;% left_join(., df2, by = c(&#39;id&#39;)) 4.5 select column by name df &lt;- subset(df, select = c(id, gender)) df &lt;- df %&gt;% select(&#39;id&#39;, &#39;age&#39;) "],
["subset.html", "Chapter 5 subset 5.1 Example one 5.2 Example two", " Chapter 5 subset Some significant applications are demonstrated in this chapter. 5.1 Example one 5.2 Example two "],
["output.html", "Chapter 6 output 6.1 csv", " Chapter 6 output 6.1 csv write.csv(df, row.names = F) "],
["useful-links.html", "useful links", " useful links "]
]
